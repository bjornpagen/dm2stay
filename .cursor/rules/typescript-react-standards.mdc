---
description: TypeScript and React Standards
globs: src/**/*.{ts,tsx}
---
 # TypeScript and React Standards

Standards for TypeScript, React, and Next.js development practices.

<rule>
name: typescript_react_standards
description: Standards for TypeScript and React development to ensure consistency and best practices
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"

actions:
  - type: suggest
    message: |
      When writing TypeScript and React code:

      1. Component Architecture:
         - Always use Server Components by default
         - Only use "use client" when absolutely necessary (e.g., event handlers, hooks, browser APIs)
         - Always use proper HTML semantic elements (nav, main, article, section, aside)
         - Always implement error.tsx boundaries for proper error handling
         - Always implement loading states using shadcn skeletons

      2. Imports and Navigation:
         - Always use NextJS `Link` component over router/navigation methods
         - Always namespace React imports:
           ```typescript
           // Bad
           import { Fragment, useEffect } from 'react';
           
           // Good
           import React from 'react';
           // Then use React.Fragment, React.useEffect
           ```
         - Always use React.Fragment over empty brackets (<>)
         - Always use Next/Image over img tag:
           ```typescript
           // Bad
           <img src="/image.png" alt="description" />
           
           // Good
           import Image from 'next/image';
           <Image src="/image.png" alt="description" width={} height={} />
           ```

      3. TypeScript Practices:
         - Always use explicit return types:
           ```typescript
           // Bad
           const MyComponent = ({ name }) => {
             return <div>{name}</div>
           }
           
           // Good
           const MyComponent = ({ name }: { name: string }): React.JSX.Element => {
             return <div>{name}</div>
           }
           ```
         - Always use interface for type definitions
         - Use satisfies operator for type validation:
           ```typescript
           const config = {
             endpoint: '/api',
             method: 'POST'
           } satisfies ApiConfig;
           ```

      4. Performance Optimization:
         - Always memoize callbacks passed as props:
           ```typescript
           // Bad
           const handleClick = () => {...}
           
           // Good
           const handleClick = React.useCallback(() => {
             ...
           }, [dependencies]);
           ```
         - Always memoize expensive computations:
           ```typescript
           // Bad
           const expensiveValue = heavyComputation(data);
           
           // Good
           const expensiveValue = React.useMemo(() => 
             heavyComputation(data),
             [data]
           );
           ```

      5. Documentation:
         - Only write comments for:
           - TODO items
           - biome-ignore
           - ts-expect-error
           - JSDoc documentation
         - Always write JSDoc comments for top-level declarations:
           ```typescript
           /** 
            * Fetches user data from the API
            * @param userId - The unique identifier of the user
            * @returns The user data object
            */
           const fetchUser = async (userId: string): Promise<User> => {
             ...
           }
           ```

examples:
  - input: |
      // Bad
      import { Fragment } from 'react';
      const MyComponent = () => {
        const value = expensiveCalculation();
        return <>Content</>;
      }

      // Good
      import React from 'react';
      
      /** 
       * Displays user content with optimized performance
       * @param props - The component props
       */
      const MyComponent = (props: Props): React.JSX.Element => {
        const value = React.useMemo(() => expensiveCalculation(), []);
        return <React.Fragment>Content</React.Fragment>;
      }
    output: "Correctly following TypeScript and React standards"

metadata:
  priority: high
  version: 1.0
</rule>